version: '3.4'

services:
  mongo:
    image: mongo:4.0.12
    networks:
      - micros-network
    volumes:
      - micros-mongo-data:/data/db
  
  redis:
    image: redis:5.0.5-alpine
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - micros-network
    volumes:
      - micros-redis-data:/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - micros-network

  apigateway:
    image: traefik:v2.0.1
    ports:
      - "5080:80" # Port of the API Gateway, which will be the port behind which the system will be published
      - "5088:8080" # Dashboard of Traefik for troubleshooting
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events (see .env file for Windows workaround to make this work)
    networks:
      - micros-network
  
  company:
    image: "${REGISTRY_URL:-micros}/company:${IMAGE_TAG:-latest}"
    build:
      context: ../company
      dockerfile: Dockerfile
    networks:
      - micros-network
    depends_on:
      - mongo
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.company.rule=PathPrefix(`/api/company`)" # Routing rule

  poi:
    image: "${REGISTRY_URL:-micros}/poi:${IMAGE_TAG:-latest}"
    build:
      context: ../poi
      dockerfile: Dockerfile
    networks:
      - micros-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.poi.rule=PathPrefix(`/api/poi`)" # Routing rule

  feedback:
    image: "${REGISTRY_URL:-micros}/feedback:${IMAGE_TAG:-latest}"
    build:
      context: ../feedback
      dockerfile: Dockerfile
    stop_signal: SIGINT
    environment:
      - "PREFIX=/api/feedback"
    networks:
      - micros-network
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.feedback.rule=PathPrefix(`/api/feedback`)" # Routing rule

  usage:
    image: "${REGISTRY_URL:-micros}/usage:${IMAGE_TAG:-latest}"
    build:
      context: ../usage
      dockerfile: Dockerfile
    networks:
      - micros-network
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.usage.rule=PathPrefix(`/api/usage`)" # Routing rule
  
  udp:
    image: "${REGISTRY_URL:-micros}/udp:${IMAGE_TAG:-latest}"
    build:
      context: ../udp/UsageDataProvider/
      dockerfile: Dockerfile
    networks:
      - micros-network
    environment:
      - "PREFIX=/udp"
      - "RABBIT_HOST=rabbitmq"
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.udp.rule=PathPrefix(`/udp`)" # Routing rule

  userfrontend:
    image: "${REGISTRY_URL:-micros}/userfrontend:${IMAGE_TAG:-latest}"
    build:
      context: ../user-frontend
      dockerfile: Dockerfile
    networks:
      - micros-network
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.userfrontend.rule=PathPrefix(`/`)" # Routing rule

networks:
  micros-network:
    driver: bridge

volumes:
  micros-mongo-data:
    driver: local
  micros-redis-data:
    driver: local
